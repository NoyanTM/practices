' TODO: change report_data to report.json directly save to file system
' TODO: is_suppresed/skipped pipeline step
' TODO: ssh keys, setup container (image and so on), download git, and set other things
' TODO: jenkins, gitlab ci/cd, github - actions/checkout/, etc.

@startuml
!include flowchart_styles.puml

start
' 'is_scanned: bool\n\
declare("branch: string\n\
  repository_url: string\n\
  retry_counter: integer\n\
  retry_limit: integer\n\
  is_clonned: bool\n\
  is_skipped: bool\n\
  report: dictionary")

assign("retry_limit = 5")
note right: default value,\ncan be modified externally

input("branch and repository_url")
note right: from secrets vault\nor environment variables

if ((branch and repository_url both not empty strings)\n AND (they both have correct format)) then (false)
  output("Errors and exceptions\nwith stack traces")
  note right: to logs
  process("Stop execution\nand fail pipeline")
  stop
else (true)
  assign("retry_counter = 0\n\
    is_clonned = false")
  while (retry_counter <= retry_limit) is (true)
    defprocess("Execute `git`\n\
      on repository_url\n\
      with specific branch\n\
      to clone repository")
    note right: Version control system\nhttps://github.com/git/git
    if ((issues with connection)\n OR (not found repository_url with branch)\n or (Insufficient permissions or access to repository)\n OR (issues with repository hosting platform)\n OR (internal error or exception in `git`)) then (true)
      assign("retry_counter += 1")
    else (false)
      assign("is_clonned = true\n\
        retry_counter = 0")
      break
    endif
  endwhile (false)

  if (is_clonned) then (true)
    defprocess("Check files and\n\
      their validity / integrity\n\
      via different toolkits\n\
      for static analysis\n\
      and hashsum calculations")
    note right
      For example, we can use `git fsck`.
      It is required process, because history or tree can be modified / spoofed / tampered
      or there are some corrupted files and so on. That is why centralized version
      control systems (like TortoiseSVN) are more secure by design,
      because users only upload files and not histories/changes.
      References of git tree modification in Linux repository:
      - https://www.youtube.com/watch?v=NnrMmq8Sf44
      - https://www.youtube.com/watch?v=Zu42F-XMNC4
    end note
    if (everything with repository is okay) then (true)
      defprocess("Execute `gitleaks` that scans for\n\
        secrets and secrets-like hardcoded\n\
        values/pattern in repository")
      note right: Secrets scanner tool\nhttps://github.com/gitleaks/gitleaks    
      if (internal error or exception in tool) then (true)
        output("Message that the target is not scanned due to\n\
        failed calls to toolkit with\n\
        errors and exceptions\nwith stack traces")
        note right: to logs
        process("Stop execution\nand fail pipeline")
        stop
      else (false)
        if (report is not empty) then (true)
          output("Report with details")
          note right
            to pipeline and user as file
            to logs
          end note
          process("Complete execution\nand start next step in pipeline")
        else (false)
          output("Message that tool did not found secrets")
          note right
            to logs
          end note
          process("Complete execution\nand start next step in pipeline")
        endif
      endif
    else (false)
      output("Message that repository\nis potentially altered or suspicious")
      note right: to logs
      process("Stop execution\nand fail pipeline")
      stop
    endif
  else (false)
    output("Message that the repository is not cloned due to\n\
      failed calls to toolkit with\n\
      errors and exceptions\nwith stack traces")
    note right: to logs
    process("Stop execution\nand fail pipeline")
    stop
  endif
endif
@enduml
