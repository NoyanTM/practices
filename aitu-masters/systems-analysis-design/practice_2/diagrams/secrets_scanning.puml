@startuml
start
:**Declare variables**:
branch: string
repository_url: string
retry_counter: integer
retry_limit: integer
is_scanned: bool
is_skipped: bool
report: dictionary;

:**Assign**:
retry_limit = 5 (as default value);

:**Input:**
branch and repository_url
from secrets vault or environment variables;

if ((branch and repository_url both not empty strings)\n AND (they both have incorrect format)) then (true)
    :**Output**:
    error stack trace;
    :**Process**
    Fail the process and pipeline;
    stop
else (false)
    :**Input**:
    retry_limit
    from secrets vault or environment variables
    if defined externally;
    
    :**Process**:
    Execute `git clone` command on
    "repository_url" with specific "branch"
    to clone repository;
    note right
        Version control system
        https://github.com/git/git
    end note
    
    'TODO: add retries to git clone
    'TODO: check if it is really files there and hash correct
    'TODO: change report_data to report.json directly save to file system
    'TODO: is_suppresed/skipped
    if ((issues with connection)\n OR (no such branch and repository_url)\n OR (issues with repository hosting platform)\n OR (internal error or exception in `git`)) then (true)
        :**Output**:
        Error stack trace;
        :**Process**:
        Fail the process and pipeline;
        stop
    else (false)
        :**Assign**:
        retry_counter = 0
        is_scanned = false;
        while (retry_counter <= retry_limit) is (true)
            :**Process**
            Execute tool that scans for
            secrets and secrets-like hardcoded
            values in repository
            report, error = scan();
            note right
                Secrets scanner tool
                https://github.com/gitleaks/gitleaks
            end note
            if (internal error and exception in tool) then (true)
                :**Assign**:
                retry_counter += 1;
            else (false)
                :**Assign**:
                is_scanned = true
                retry_counter = 0;
                break
            endif
        endwhile (false)
        
        if (is_scanned) then (true)
            if (if report is not empty) then (true) 
                :**Output**:
                Return report to pipeline and user;
                :**Process**:
                Fail the process and pipeline;
            else (false)
                :**Output**:
                Return empty report and message like "tool did not found secrets" to pipeline and user;
                :**Process**:
                Done the process and go to next step in pipeline;
            endif
            stop
        else (false)
            :**Output**:
            Return message that "the target is not scanned due
            to retries amount exceed of failed calls to toolkit";
            :**Process**:
            Fail the process and pipeline;
            stop
        endif
@enduml
